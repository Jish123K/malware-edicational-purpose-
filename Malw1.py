import os

import sys

import random

# This function opens a file and reads its contents.

def read_file(filename):

    with open(filename, 'r') as f:

        return f.read()

# This function creates a new file and writes the given string to it.

def write_file(filename, string):

    with open(filename, 'w') as f:

        f.write(string)

# This function gets the current working directory.

def get_working_directory():

    return os.getcwd()

# This function gets the list of all files in the current working directory.

def get_files():

    return os.listdir()

# This function gets the size of a file.

def get_file_size(filename):

    return os.path.getsize(filename)

# This function gets the modification time of a file.

def get_file_modification_time(filename):

    return os.path.getmtime(filename)

# This function creates a new directory.

def create_directory(directory):

    os.mkdir(directory)
    # This function removes a directory.

def remove_directory(directory):

    os.rmdir(directory)

# This function renames a file or directory.

def rename(old_name, new_name):

    os.rename(old_name, new_name)

# This function copies a file or directory.

def copy(source, destination):

    os.copy(source, destination)

# This function moves a file or directory.

def move(source, destination):

    os.rename(source, destination)

# This function gets the list of all processes running on the system.

def get_processes():

    return [p for p in psutil.process_iter()]

# This function gets the information about a process.

def get_process_info(process):

    return process.info()

# This function kills a process.

def kill_process(process):

    process.kill()

# This function gets the list of all network connections.

def get_network_connections():

    return [c for c in netstat.connections()]

# This function gets the information about a network connection.

def get_network_connection_info(connection):

    return connection.info()

# This function blocks a network connection.

def block_network_connection(connection):

    connection.close()

# This function unblocks a network connection.

def unblock_network_connection(connection):

    connection.open()
    # This function gets the list of all open ports.

def get_open_ports():

    return [p for p in netstat.get_endpoints() if p.status == 'LISTEN']

# This function gets the information about an open port.

def get_open_port_info(port):

    return netstat.get_endpoint_info(port)

# This function opens a port.

def open_port(port):

    os.system('netsh interface portproxy add v4tov4 listenport=' + str(port) + ' listenaddress=0.0.0.0')

# This function closes a port.

def close_port(port):

    os.system('netsh interface portproxy delete v4tov4 listenport=' + str(port))

# This function gets the list of all users on the system.

def get_users():

    return [u for u in pwd.get_users()]

# This function gets the information about a user.

def get_user_info(user):

    return pwd.getpwnam(user)

# This function changes the password of a user.

def change_password(user, new_password):

    os.system('passwd ' + user + ' ' + new_password)

# This function gets the list of all groups on the system.

def get_groups():

    return [g for g in grp.get_groups()]

# This function gets the information about a group.

def get_group_info(group):

    return grp.getgrnam(group)
# This function adds a user to a group.

def add_user_to_group(user, group):

    os.system('usermod -aG ' + group + ' ' + user)

# This function removes a user from a group.

def remove_user_from_group(user, group):

    os.system('usermod -d ' + group + ' ' + user)

# This function gets the list of all running services.

def get_running_services():

    return [s for s in psutil.process_iter() if s.status == 'RUNNING']

# This function gets the information about a service.

def get_service_info(service):

    return service.info()

# This function starts a service.

def start_service(service):

    service.start()

# This function stops a service.

def stop_service(service):

    service.stop()

# This function restarts a service.

def restart_service(service):

    service.restart()

# This function gets the list of all installed packages.

def get_installed_packages():

    return [p for p in pkgutil.iter_modules()]

# This function gets the information about a package.

def get_package_info(package):

    return pkgutil.get_data(package)
    # This function installs a package.

def install_package(package):

    pip.main(['install', package])

# This function uninstalls a package.

def uninstall_package(package):

    pip.main(['uninstall', package])

# This function updates all installed packages.

def update_packages():

    pip.main(['update'])

# This function gets the list of all available updates.

def get_available_updates():

    return [u for u in pip.get_installed_distributions() if u.has_pending_upgrades()]

# This function downloads all available updates.

def download_updates():

    for u in get_available_updates():

        u.fetch()

# This function installs all downloaded updates.

def install_updates():

    for u in get_available_updates():

        u.install()

# This function gets the list of all known vulnerabilities.

def get_known_vulnerabilities():

    return [v for v in vuln.get_vulnerabilities()]

# This function checks if a system is vulnerable to a known vulnerability.

def is_vulnerable(vulnerability):

    return vulnerability in get_known_vulnerabilities()

# This function patches a system for a known vulnerability.

def patch_system(vulnerability):

    vuln.patch(vulnerability)

# This function gets the list of all open ports on a system.

def get_open_ports():

    return [p for p in netstat.get_endpoints() if p.
